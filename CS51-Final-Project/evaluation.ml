(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try !(List.assoc varname env) with
      Not_found -> raise (EvalError "no such varid in env")

    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | (vid, vref) :: tl -> if vid = varname then (vid, loc) :: tl
                             else (vid, vref) :: extend tl varname loc
      | [] -> [varname, loc]

    let rec env_to_string (env : env) : string =
      match env with
      | (vid, vref) :: tl ->
        (match !vref with
        | Closure (expr,_env) -> "(" ^ vid ^ " -> "
                                ^ "(" ^ exp_to_concrete_string expr ^ ",env) :: "
                                ^ env_to_string tl
        | Val (expr) ->         "(" ^ vid ^ " -> "
                                ^ exp_to_concrete_string expr ^ ") :: "
                                ^ env_to_string tl)
      | [] -> "[]"

    let value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Closure (exp,env) -> if printenvp
                           then "(" ^ exp_to_concrete_string exp ^ ", "
                             ^ env_to_string env ^ ")"
                           else exp_to_concrete_string exp
      | Val (exp) -> exp_to_concrete_string exp
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s_expr (exp : expr) (env : Env.env) : expr =
  match exp with
  | Raise -> raise (EvalError "expression of type Raise evaluated")
  | Unassigned -> raise (EvalError "cannot evaluate expression of type Unassigned")
  | Var (var1) -> raise (EvalError ("unbound value " ^ var1))
  | Num (int1)-> Num int1
  | Flt (float1)-> Flt float1
  | Bool (bool1) -> Bool bool1
  | Unop (unop1, exp1) ->
    (match unop1 with
    | Negate ->
      (match exp1 with
      | Num (int1) -> Num ((~-)int1)
      | Flt (float1) -> Flt ((~-.)float1)
      | Raise
      | Unassigned
      | Bool (_) -> raise (EvalError "can only negate expression of type Num or Flt")
      | _ -> eval_s_expr exp1 env))
  | Binop (binop1, exp1, exp2) ->
    (match binop1 with
    | Plus -> 
      (match exp1, exp2 with
      | Num (int1), Num (int2) -> Num (int1 + int2)
      | Flt (float1), Flt (float2) -> Flt (float1 +. float2)
      | Raise, _
      | Unassigned, _
      | Bool (_), _
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only add expressions of type Num or Flt")
      | _, _ -> eval_s_expr (Binop (Plus, eval_s_expr exp1 env, eval_s_expr exp2 env)) env )
    | Minus ->    
      (match exp1, exp2 with
      | Num (int1), Num (int2) -> Num (int1 - int2)
      | Flt (float1), Flt (float2) -> Flt (float1 -. float2)
      | Raise, _
      | Unassigned, _
      | Bool (_), _
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only subtract expressions of type Num or Flt")
      | _, _ -> eval_s_expr (Binop (Minus, eval_s_expr exp1 env, eval_s_expr exp2 env)) env )
    | Times ->    
      (match exp1, exp2 with
      | Num (int1), Num (int2) -> Num (int1 * int2)
      | Flt (float1), Flt (float2) -> Flt (float1 *. float2)
      | Raise, _
      | Unassigned, _
      | Bool (_), _
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only multiply expressions of type Num or Flt")
      | _, _ -> eval_s_expr (Binop (Times, eval_s_expr exp1 env, eval_s_expr exp2 env)) env)
    | Equals ->
      (match exp1, exp2 with
      | Num (int1), Num (int2) -> Bool (int1 = int2)
      | Flt (float1), Flt (float2) -> Bool (float1 = float2)
      | Bool (bool1), Bool (bool2) -> Bool (bool1 = bool2)
      | Var (var1), Var (var2) -> Bool (var1 = var2)
      | Raise, _
      | Unassigned, _
      | _, Raise
      | _, Unassigned
      | Num (_), Bool (_)
      | Bool (_), Num (_)
      | Num (_), Flt (_)
      | Flt (_), Num (_)
      | Bool (_), Flt (_)
      | Flt (_), Bool (_) -> raise (EvalError "can only equate expressions of shared type Num, Flt, Bool, or Var")
      | _, _ -> eval_s_expr (Binop (Equals, eval_s_expr exp1 env, eval_s_expr exp2 env)) env)
    | LessThan -> 
      (match exp1, exp2 with
      | Num (int1), Num (int2) -> Bool (int1 < int2)
      | Flt (float1), Flt (float2) -> Bool ((Float.compare float1 float2) < 0)
      | Raise, _
      | Unassigned, _
      | Bool (_), _ 
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only compare expressions of type Num of Flt")
      | _, _ -> eval_s_expr (Binop (LessThan, eval_s_expr exp1 env, eval_s_expr exp2 env)) env ) )
  | Conditional (exp1, exp2, exp3) -> 
      (match exp1, exp2, exp3 with
      | Bool (bool1), _, _ -> if bool1
                              then eval_s_expr exp2 env
                              else eval_s_expr exp3 env
      | Raise, _, _
      | Unassigned, _, _
      | Num (_), _, _ 
      | Flt (_), _, _ -> raise (EvalError "conditional expression must be of type Bool")
      | _, _, _ -> eval_s_expr (Conditional (eval_s_expr exp1 env,
                               eval_s_expr exp2 env,
                               eval_s_expr exp3 env)) env )
  | Fun (var1, exp1) -> Fun (var1, exp1)
  | Let (var1, exp1, exp2) -> eval_s_expr (subst var1 exp1 exp2) env
  | Letrec (var1, exp1, exp2) -> eval_s_expr (subst var1 exp1 exp2) env
  | App (exp1, exp2) -> 
    (match exp1, exp2 with
    | Fun (var1, exp3), _ -> eval_s_expr (subst var1 exp2 exp3) env
    | _, _-> raise (EvalError "only expressions of type Fun can be applied to other expresions")) ;;

let eval_s (exp : expr) (env : Env.env) : Env.value =
  Env.Val (eval_s_expr exp env);;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d_expr (exp : expr) (env : Env.env) : expr =
  match exp with
  | Raise -> raise (EvalError "expression of type Raise evaluated")
  | Unassigned -> Unassigned
  | Var (var1) -> (match (Env.lookup env var1) with
                  | Val (ep) -> ep
                  | Closure (ep, ev) -> eval_d_expr ep ev)
  | Num (int1)-> Num int1
  | Flt (float1)-> Flt float1
  | Bool (bool1) -> Bool bool1
  | Unop (unop1, exp1) ->
    (match unop1 with
    | Negate ->
      (let exp1 = eval_d_expr exp1 env in
      match exp1 with
      | Num (int1) -> Num ((~-)int1)
      | Flt (float1) -> Flt ((~-.)float1)
      | Raise
      | Unassigned
      | Bool (_) -> raise (EvalError "can only negate expression of type Num or Flt")
      | _ -> eval_d_expr exp1 env))
  | Binop (binop1, exp1, exp2) ->
    (match binop1 with
    | Plus -> 
      (let exp1 = eval_d_expr exp1 env in
      let exp2 = eval_d_expr exp2 env in
      match exp1, exp2 with
      | Num (int1), Num (int2) -> Num (int1 + int2)
      | Flt (float1), Flt (float2) -> Flt (float1 +. float2)
      | Raise, _
      | Unassigned, _
      | Bool (_), _
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only add expressions of type Num or Flt")
      | _, _ -> eval_d_expr (Binop (Plus, eval_d_expr exp1 env, eval_d_expr exp2 env)) env )
    | Minus ->    
      (let exp1 = eval_d_expr exp1 env in
      let exp2 = eval_d_expr exp2 env in
      match exp1, exp2 with
      | Num (int1), Num (int2) -> Num (int1 - int2)
      | Flt (float1), Flt (float2) -> Flt (float1 -. float2)
      | Raise, _
      | Unassigned, _
      | Bool (_), _
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only subtract expressions of type Num or Flt")
      | _, _ -> eval_d_expr (Binop (Minus, eval_d_expr exp1 env, eval_d_expr exp2 env)) env )
    | Times ->    
      (let exp1 = eval_d_expr exp1 env in
      let exp2 = eval_d_expr exp2 env in
      match exp1, exp2 with
      | Num (int1), Num (int2) -> Num (int1 * int2)
      | Flt (float1), Flt (float2) -> Flt (float1 *. float2)
      | Raise, _
      | Unassigned, _
      | Bool (_), _
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only multiply expressions of type Num or Flt")
      | _, _ -> eval_d_expr (Binop (Times, eval_d_expr exp1 env, eval_d_expr exp2 env)) env)
    | Equals ->
      (let exp1 = eval_d_expr exp1 env in
      let exp2 = eval_d_expr exp2 env in
      match exp1, exp2 with
      | Num (int1), Num (int2) -> Bool (int1 = int2)
      | Flt (float1), Flt (float2) -> Bool (float1 = float2)
      | Bool (bool1), Bool (bool2) -> Bool (bool1 = bool2)
      | Var (var1), Var (var2) -> Bool (var1 = var2)
      | Raise, _
      | Unassigned, _
      | _, Raise
      | _, Unassigned
      | Num (_), Bool (_)
      | Bool (_), Num (_)
      | Num (_), Flt (_)
      | Flt (_), Num (_)
      | Bool (_), Flt (_)
      | Flt (_), Bool (_) -> raise (EvalError "can only equate expressions of shared type Num, Bool, or Var")
      | _, _ -> eval_d_expr (Binop (Equals, eval_d_expr exp1 env, eval_d_expr exp2 env)) env)
    | LessThan -> 
      (let exp1 = eval_d_expr exp1 env in
      let exp2 = eval_d_expr exp2 env in
      match exp1, exp2 with
      | Num (int1), Num (int2) -> Bool (int1 < int2)
      | Flt (float1), Flt (float2) -> Bool ((Float.compare float1 float2) < 0)
      | Raise, _
      | Unassigned, _
      | Bool (_), _ 
      | _, Raise
      | _, Unassigned
      | _, Bool (_) 
      | Num (_), Flt (_)
      | Flt (_), Num (_) -> raise (EvalError "can only compare expressions of type Num or Flt")
      | _, _ -> eval_d_expr (Binop (LessThan, eval_d_expr exp1 env, eval_d_expr exp2 env)) env ) )
  | Conditional (exp1, exp2, exp3) -> 
      (let exp1 = eval_d_expr exp1 env in
      match exp1, exp2, exp3 with
      | Bool (bool1), _, _ -> if bool1
                              then eval_d_expr exp2 env
                              else eval_d_expr exp3 env
      | Raise, _, _
      | Unassigned, _, _
      | Num (_), _, _ 
      | Flt (_), _, _ -> raise (EvalError "conditional expression must be of type Bool")
      | _, _, _ -> eval_d_expr (Conditional (eval_d_expr exp1 env,
                               eval_d_expr exp2 env,
                               eval_d_expr exp3 env)) env )
  | Fun (var1, exp1) -> Fun (var1, exp1)
  | Let (x, d, b) -> let d = eval_d_expr d env in
                     eval_d_expr b (Env.extend env x (ref (Env.Val d)))
  | Letrec (x, d, b) -> let d = eval_d_expr d env in
                     eval_d_expr b (Env.extend env x (ref (Env.Val d)))
  | App (p, q) -> (
    let func = eval_d_expr p env in
    let v = eval_d_expr q env in
    (match func, v with
    | Fun (x, b), _ -> eval_d_expr b (Env.extend env x (ref (Env.Val v)))
    | _, _-> raise (EvalError "only expressions of type Fun can be applied to other expresions"))) ;;


let eval_d (exp : expr) (env : Env.env) : Env.value =
  Env.Val (eval_d_expr exp env);;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;
